package controller;

import java.io.IOException;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import domain.MemberVO;
import service.MemberService;
import service.MemberServiceImpl;


@WebServlet("/mem/*")
public class MemberController extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private static final Logger log = LoggerFactory.getLogger(MemberController.class);
	private RequestDispatcher rdp;   //요청과 응답
	private MemberService msv; // 서비스에 인터페이스 추가예정
	private String destPage;  // 목적지 페이지
	private int isUp;

	
       
  
    public MemberController() {
        msv = new MemberServiceImpl(); //서비스에 클레스로 저장해주기 . 
    }

	
	protected void service(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {
		req.setCharacterEncoding("utf-8");
		res.setCharacterEncoding("utf-8");
		res.setContentType("text/html; charset=stf-8");
		
		String uri = req.getRequestURI(); // mem/list
		String path = uri.substring(uri.lastIndexOf("/")+1); // list만 반환
		log.info(">>> URI : " + uri);
		log.info(">>> path : " + path);
		
		switch(path) {
		case "login": //login page open
			destPage = "/member/login.jsp";
			break;
			
		case "login_auth": //login 작업이 일어나는 위치
			MemberVO mvo = msv.login(new MemberVO(  // login 생성 
					req.getParameter("email"),
					req.getParameter("pwd")
					));
			if(mvo != null) {
				//세션을 가져오기
				HttpSession ses = req.getSession(); // 연결된 세션이 없다면 새로 생성
				// ses로 mvo를 바인딩 한다.
				ses.setAttribute("ses", mvo);
				ses.setMaxInactiveInterval(600);  //초단위 60*10
			}else {
				req.setAttribute("msg_login",  0) ;   // 0을 받았을 경우 로그인 실패
			}
			destPage="/";
			break;
			
		case "logout":
			//연결된 세션이 있다면 해당 세션 가져오기
			HttpSession ses = req.getSession();
			ses.invalidate(); //접속 끊기
			//로그인 정보 email 값을 가져와서 로그인 시간 update
			isUp = msv.lastLogin(req.getParameter("email"));
			log.info(">>> logout " + (isUp > 0? "ok" : "fail"));
			
			destPage="/";
			break;
			
		case "join":  //회원가입 page open
			destPage = "/member/join.jsp";
			break;
			
		case "register": //회원가입 일어나는 위치
			isUp = msv.register(new MemberVO( //register 서비스에 등록해주기
					req.getParameter("email"),
					req.getParameter("pwd"),
				    req.getParameter("nick_name")));
		    log.info(">>> join > " + (isUp > 0 ? "ok" : "fail"));
		    destPage="login";
			break;
			
		case "list":  //전체 리스트 검색
			break;
			
		case "modify":  //번호를 주고 해당 번호의 값 1개를 검색해서 open 파일에 전달
			break;
			
		case "update": //실제 수정이 일어나는 위치
			break;
			
		case "remove": //실제 삭제가 일어나는 위치
			break;
		
		
		}
		rdp = req.getRequestDispatcher(destPage);
		rdp.forward(req, res);
	}

	
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		service(request, response);
	}

	
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		service(request, response);
	}

}
